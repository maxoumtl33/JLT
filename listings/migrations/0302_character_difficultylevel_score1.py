# Generated by Django 4.2.23 on 2025-09-30 15:27

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('listings', '0301_lignecommande_date_validation_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du personnage')),
                ('description', models.TextField(verbose_name='Description')),
                ('emoji', models.CharField(default='⚽', max_length=5, verbose_name='Emoji représentatif')),
                ('power', models.IntegerField(help_text='Force du tir (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Puissance de tir')),
                ('precision', models.IntegerField(help_text='Précision du tir (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Précision')),
                ('luck', models.IntegerField(help_text='Probabilité de marquer malgré le gardien (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Chance')),
                ('curve', models.IntegerField(default=50, help_text="Capacité à donner de l'effet au ballon (0-100)", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Effet/Courbe')),
                ('strengths', models.TextField(blank=True, help_text='Points forts du personnage', verbose_name='Atouts')),
                ('weaknesses', models.TextField(blank=True, help_text='Points faibles du personnage', verbose_name='Défauts')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Personnage',
                'verbose_name_plural': 'Personnages',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DifficultyLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty_id', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile'), ('extreme', 'Extrême'), ('impossible', 'Impossible')], max_length=20, unique=True, verbose_name='Type de difficulté')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('emoji', models.CharField(default='⚽', max_length=5, verbose_name='Emoji')),
                ('goalkeeper_speed', models.IntegerField(default=500, help_text='Temps entre chaque mouvement du gardien en millisecondes', verbose_name='Vitesse du gardien (ms)')),
                ('goalkeeper_size', models.FloatField(default=1.0, help_text='Multiplicateur de taille (1.0 = normal)', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(3.0)], verbose_name='Taille du gardien')),
                ('wind_max', models.IntegerField(default=0, help_text='Force maximale du vent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Vent maximum (km/h)')),
                ('obstacles_count', models.IntegerField(default=0, help_text='Obstacles statiques dans la cage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name="Nombre d'obstacles")),
                ('defenders_count', models.IntegerField(default=0, help_text='Défenseurs mobiles', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Nombre de défenseurs')),
                ('score_multiplier', models.FloatField(default=1.0, help_text='Bonus de points pour cette difficulté', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(10.0)], verbose_name='Multiplicateur de score')),
                ('background_color', models.CharField(default='#90EE90', help_text='Code couleur hexadécimal', max_length=7, verbose_name='Couleur de fond')),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Niveau de difficulté',
                'verbose_name_plural': 'Niveaux de difficulté',
                'ordering': ['order', 'difficulty_id'],
            },
        ),
        migrations.CreateModel(
            name='Score1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, verbose_name='Score')),
                ('level_reached_value', models.IntegerField(default=1, verbose_name='Niveau atteint')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('total_shots', models.IntegerField(default=0, verbose_name='Tirs totaux')),
                ('successful_shots', models.IntegerField(default=0, verbose_name='Tirs réussis')),
                ('lucky_shots', models.IntegerField(default=0, verbose_name='Coups de chance')),
                ('max_combo', models.IntegerField(default=0, verbose_name='Combo maximum')),
                ('perfect_shots', models.IntegerField(default=0, verbose_name='Tirs parfaits')),
                ('high_shots', models.IntegerField(default=0, verbose_name='Tirs en hauteur')),
                ('mid_shots', models.IntegerField(default=0, verbose_name='Tirs au milieu')),
                ('low_shots', models.IntegerField(default=0, verbose_name='Tirs en bas')),
                ('character_fk', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scores', to='listings.character', verbose_name='Personnage utilisé')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.difficultylevel', verbose_name='Difficulté')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Joueur')),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Scores',
                'ordering': ['-score', '-date'],
            },
        ),
    ]
