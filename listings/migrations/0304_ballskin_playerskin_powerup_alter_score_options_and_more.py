# Generated by Django 4.2.23 on 2025-10-01 03:05

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('listings', '0303_character_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='BallSkin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du skin')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(help_text='Image du skin de ballon', upload_to='ball_skins/', verbose_name='Image du ballon')),
                ('price', models.IntegerField(default=100, verbose_name='Prix en pi√®ces')),
                ('emoji', models.CharField(default='‚öΩ', max_length=5, verbose_name='Emoji')),
                ('trail_color', models.CharField(default='#FFFFFF', help_text='Code couleur hexad√©cimal', max_length=7, verbose_name='Couleur de la tra√Æn√©e')),
                ('has_particles', models.BooleanField(default=False, verbose_name='Effets de particules')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Skin de ballon',
                'verbose_name_plural': 'Skins de ballons',
                'ordering': ['order', 'price'],
            },
        ),
        migrations.CreateModel(
            name='PlayerSkin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du skin')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(help_text='Image du skin de joueur', upload_to='player_skins/', verbose_name='Image du skin')),
                ('price', models.IntegerField(default=200, verbose_name='Prix en pi√®ces')),
                ('emoji', models.CharField(default='üëï', max_length=5, verbose_name='Emoji')),
                ('primary_color', models.CharField(default='#FF0000', help_text='Code couleur hexad√©cimal', max_length=7, verbose_name='Couleur principale')),
                ('secondary_color', models.CharField(default='#FFFFFF', help_text='Code couleur hexad√©cimal', max_length=7, verbose_name='Couleur secondaire')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Skin de joueur',
                'verbose_name_plural': 'Skins de joueurs',
                'ordering': ['order', 'price'],
            },
        ),
        migrations.CreateModel(
            name='PowerUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du power-up')),
                ('powerup_type', models.CharField(choices=[('precision', 'Pr√©cision am√©lior√©e'), ('power', 'Puissance accrue'), ('slowmo', 'Ralenti'), ('multiball', 'Multi-ballon'), ('giant_target', 'Cibles g√©antes'), ('freeze_keeper', 'Gardien fig√©'), ('golden_ball', 'Ballon dor√© (x2 points)')], max_length=20, verbose_name='Type de power-up')),
                ('description', models.TextField(verbose_name='Description')),
                ('emoji', models.CharField(default='‚≠ê', max_length=5, verbose_name='Emoji')),
                ('image', models.ImageField(blank=True, null=True, upload_to='powerups/', verbose_name='Image du power-up')),
                ('price', models.IntegerField(default=50, verbose_name='Prix en pi√®ces')),
                ('duration', models.IntegerField(default=30, help_text="Dur√©e de l'effet en secondes", verbose_name='Dur√©e (secondes)')),
                ('effect_value', models.FloatField(default=1.5, help_text="Multiplicateur ou valeur de l'effet", verbose_name="Valeur de l'effet")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('order', models.IntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Power-up',
                'verbose_name_plural': 'Power-ups',
                'ordering': ['order', 'price'],
            },
        ),
        migrations.AlterModelOptions(
            name='score',
            options={'ordering': ['-score', '-date'], 'verbose_name': 'Score', 'verbose_name_plural': 'Scores'},
        ),
        migrations.AlterModelOptions(
            name='score1',
            options={},
        ),
        migrations.RemoveField(
            model_name='difficultylevel',
            name='defenders_count',
        ),
        migrations.RemoveField(
            model_name='difficultylevel',
            name='obstacles_count',
        ),
        migrations.RemoveField(
            model_name='difficultylevel',
            name='wind_max',
        ),
        migrations.RemoveField(
            model_name='score',
            name='user',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='character_fk',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='difficulty',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='high_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='level_reached_value',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='low_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='lucky_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='max_combo',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='mid_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='perfect_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='player',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='successful_shots',
        ),
        migrations.RemoveField(
            model_name='score1',
            name='total_shots',
        ),
        migrations.AddField(
            model_name='character',
            name='is_premium',
            field=models.BooleanField(default=False, help_text='Personnage premium n√©cessitant un achat', verbose_name='Premium'),
        ),
        migrations.AddField(
            model_name='character',
            name='price',
            field=models.IntegerField(default=0, help_text='0 = Gratuit/D√©bloqu√© par d√©faut', verbose_name='Prix en pi√®ces'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='coin_multiplier',
            field=models.FloatField(default=1.0, help_text='Bonus de pi√®ces pour cette difficult√©', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(5.0)], verbose_name='Multiplicateur de pi√®ces'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='distance',
            field=models.IntegerField(default=20, help_text='Distance du coup franc en m√®tres', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50)], verbose_name='Distance (m√®tres)'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='target_count',
            field=models.IntegerField(default=3, help_text='Nombre de cibles bonus dans le but', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)], verbose_name='Nombre de cibles'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='target_size',
            field=models.FloatField(default=1.0, help_text='Multiplicateur de taille des cibles', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)], verbose_name='Taille des cibles'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='wall_enabled',
            field=models.BooleanField(default=False, help_text='Active le mur de d√©fenseurs', verbose_name='Mur de d√©fenseurs'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='wall_jump_probability',
            field=models.FloatField(default=0.5, help_text='Probabilit√© que le mur saute (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Probabilit√© de saut du mur'),
        ),
        migrations.AddField(
            model_name='difficultylevel',
            name='wall_players',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='Nombre de joueurs dans le mur'),
        ),
        migrations.AddField(
            model_name='score',
            name='character',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.character', verbose_name='Personnage utilis√©'),
        ),
        migrations.AddField(
            model_name='score',
            name='coins_earned',
            field=models.IntegerField(default=0, verbose_name='Pi√®ces gagn√©es'),
        ),
        migrations.AddField(
            model_name='score',
            name='difficulty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.difficultylevel', verbose_name='Difficult√©'),
        ),
        migrations.AddField(
            model_name='score',
            name='exp_earned',
            field=models.IntegerField(default=0, verbose_name='Exp√©rience gagn√©e'),
        ),
        migrations.AddField(
            model_name='score',
            name='max_combo',
            field=models.IntegerField(default=0, verbose_name='Combo maximum'),
        ),
        migrations.AddField(
            model_name='score',
            name='perfect_shots',
            field=models.IntegerField(default=0, verbose_name='Tirs parfaits'),
        ),
        migrations.AddField(
            model_name='score',
            name='player',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_scores', to=settings.AUTH_USER_MODEL, verbose_name='Joueur'),
        ),
        migrations.AddField(
            model_name='score',
            name='powerups_used',
            field=models.JSONField(blank=True, default=list, verbose_name='Power-ups utilis√©s'),
        ),
        migrations.AddField(
            model_name='score',
            name='successful_shots',
            field=models.IntegerField(default=0, verbose_name='Tirs r√©ussis'),
        ),
        migrations.AddField(
            model_name='score',
            name='targets_hit',
            field=models.IntegerField(default=0, verbose_name='Cibles touch√©es'),
        ),
        migrations.AddField(
            model_name='score',
            name='total_shots',
            field=models.IntegerField(default=0, verbose_name='Tirs totaux'),
        ),
        migrations.AddField(
            model_name='score1',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='score',
            name='date',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Date'),
        ),
        migrations.AlterField(
            model_name='score',
            name='score',
            field=models.IntegerField(default=0, verbose_name='Score'),
        ),
        migrations.AlterField(
            model_name='score1',
            name='date',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='score1',
            name='score',
            field=models.IntegerField(),
        ),
        migrations.CreateModel(
            name='UserProfileFoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pi√®ces')),
                ('gems', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Gemmes')),
                ('level', models.IntegerField(default=1, verbose_name='Niveau')),
                ('experience', models.IntegerField(default=0, verbose_name='Exp√©rience')),
                ('total_goals', models.IntegerField(default=0, verbose_name='Buts totaux')),
                ('total_games', models.IntegerField(default=0, verbose_name='Parties jou√©es')),
                ('best_score', models.IntegerField(default=0, verbose_name='Meilleur score')),
                ('total_targets_hit', models.IntegerField(default=0, verbose_name='Cibles touch√©es')),
                ('achievements', models.JSONField(blank=True, default=dict, verbose_name='Succ√®s d√©bloqu√©s')),
                ('last_daily_bonus', models.DateTimeField(blank=True, null=True, verbose_name='Dernier bonus quotidien')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('selected_ball_skin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.ballskin', verbose_name='Skin de ballon s√©lectionn√©')),
                ('selected_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.character', verbose_name='Personnage s√©lectionn√©')),
                ('selected_player_skin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.playerskin', verbose_name='Skin de joueur s√©lectionn√©')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil de joueur',
                'verbose_name_plural': 'Profils de joueurs',
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(verbose_name='Prix pay√©')),
                ('currency', models.CharField(choices=[('coins', 'Pi√®ces'), ('gems', 'Gemmes')], default='coins', max_length=10, verbose_name='Monnaie utilis√©e')),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('ball_skin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.ballskin')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.character')),
                ('player_skin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.playerskin')),
                ('powerup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listings.powerup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achat',
                'verbose_name_plural': 'Achats',
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(choices=[('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('alltime', 'Tous les temps')], max_length=10, verbose_name='P√©riode')),
                ('score', models.IntegerField(verbose_name='Score total')),
                ('rank', models.IntegerField(verbose_name='Rang')),
                ('games_played', models.IntegerField(default=0, verbose_name='Parties jou√©es')),
                ('reward_claimed', models.BooleanField(default=False, verbose_name='R√©compense r√©clam√©e')),
                ('period_start', models.DateTimeField(verbose_name='D√©but de la p√©riode')),
                ('period_end', models.DateTimeField(verbose_name='Fin de la p√©riode')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Classement',
                'verbose_name_plural': 'Classements',
                'ordering': ['period', 'rank'],
                'unique_together': {('user', 'period', 'period_start')},
            },
        ),
    ]
